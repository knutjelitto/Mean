grammar Mean
{
    options
    {
        Axiom       = "expression"; // the top variable for this grammar
        Separator   = "SEPARATOR"; // the terminal that represent white space
        
        CompilationMode = "Source";
        ParserType = "LR";
        //ParserType = "RNGLR";
        Runtime = "Net";
        Namespace = "Mean.Language";
        AccessModifier = "Internal";
    }
    
    terminals
    {
        NEW_LINE	
            -> U+000D           /* CR */
            |  U+000A           /* LF */
            |  U+000D U+000A    /* CR LF */
            |  U+0085           // Next line character
            |  U+2028           // Line separator character
            |  U+2029           //^Paragraph separator character
            ;

        WHITE_SPACE
            -> uc{Zs} | U+0009 | U+000B | U+000C
            ;

        COMMENT_LINE
            -> '//' (.* - (.* NEW_LINE .*))
            ;

        COMMENT_BLOCK
            -> '/*' (.* - (.* '*/' .*)) '*/'
            ;

        IDENTIFIER
            -> [a-zA-Z_] [a-zA-Z0-9_]*
            ;

        INTEGER
            -> '0'
            |  [1-9] [0-9]*
            ;

        REAL
            -> INTEGER? '.' [0-9]+  (('e' | 'E') ('+' | '-')? INTEGER)?
            |  INTEGER ('e' | 'E') ('+' | '-')? INTEGER
            ;

        NUMBER
            -> INTEGER
            | REAL
            ;
        
        SEPARATOR
            -> (NEW_LINE | WHITE_SPACE | COMMENT_LINE | COMMENT_BLOCK)+
            ;
    }
  
    rules
    {
        primary_expression
            ->  NUMBER^
            |   '('! expression^ ')'!
            ;

        exp_factor
            -> primary_expression^
            |  exp_factor '*'^ primary_expression
            |  exp_factor '/'^  primary_expression
            ;

        exp_term
            -> exp_factor^
            |  exp_term '+'^ exp_factor
            |  exp_term '-'^ exp_factor
            ;

        expression
            -> exp_term^
            ;
    }
}
Name: Mean
Options:
	Axiom = "unit"
	Separator = "SEPARATOR"
	ParserType = "RNGLR"
	CompilationMode = "Debug"
	Namespace = "Mean.Language.Generated"
	AccessModifier = "Public"
	Runtime = "Net"
Terminals:
	__T0000 = <
	__T0001 = ,
	__T0002 = >
	__T0003 = =
	__T0004 = (
	__T0005 = )
	__T0006 = [
	__T0007 = ]
	__T0008 = .
	__T0009 = -
	__T000A = +
	__T000B = !
	__T000C = *
	__T000D = /
	__T000E = %
	__T000F = mod
	__T0010 = shl
	__T0011 = shr
	__T0012 = ==
	__T0013 = !=
	__T0014 = <=
	__T0015 = >=
	__T0016 = &
	__T0017 = ^
	__T0018 = |
	__T0019 = &&
	__T001A = ||
	__T001B = ?
	__T001C = :
	__T001D = {
	__T001E = }
	__T001F = namespace
	__T0020 = function
	__T0021 = ;
	__T0022 = method
	__T0023 = type
	__T0024 = trait
	__T0025 = where
	BOOL_LITERAL = BOOL_LITERAL
	FLOAT_LITERAL = FLOAT_LITERAL
	IDENTIFIER = IDENTIFIER
	INTEGER_LITERAL = INTEGER_LITERAL
	SEPARATOR = SEPARATOR
Rules:
	__V15 -> ,! name
	__V15 -> __V15 ,! name
	__V151 -> unitItem
	__V151 -> __V151 unitItem
	__V153 -> namespaceItem
	__V153 -> __V153 namespaceItem
	__V159 -> traitItem
	__V159 -> __V159 traitItem
	__V160 -> ,! genericName
	__V160 -> __V160 ,! genericName
	__V161 -> ,! genericDefaults
	__V161 -> __V161 ,! genericDefaults
	__V17 -> ,! genericArgsBinding
	__V17 -> __V17 ,! genericArgsBinding
	__V62 -> ,! expression
	__V62 -> __V62 ,! expression
	__VAxiom -> unit^ $!
	addExpression -> "addOp"^ addExpression +! mulExpression
	addExpression -> "subOp"^ addExpression -! mulExpression
	addExpression -> mulExpression^
	andExpression -> "andThenOp"^ andExpression &&^ bitOrExpression
	andExpression -> bitOrExpression^
	bitAndExpression -> "andOp"^ bitAndExpression &! equalityExpression
	bitAndExpression -> equalityExpression^
	bitOrExpression -> "orOp"^ bitOrExpression |! bitXorExpression
	bitOrExpression -> bitXorExpression^
	bitXorExpression -> "xorOp"^ bitXorExpression ^! bitAndExpression
	bitXorExpression -> bitAndExpression^
	blockExpression -> { expression^ }
	conditionalExpression -> "iff" conditionalExpression ?! expression :! expression
	conditionalExpression -> orExpression^
	declaredFunction -> function functionKernel ;
	declaredMethod -> method functionKernel ;
	definedFunction -> function functionKernel { maybeFunctionItems }
	definedMethod -> method functionKernel { maybeFunctionItems }
	equalityExpression -> "eqOp"^ shiftExpression ==! shiftExpression
	equalityExpression -> "neOp"^ shiftExpression !=! shiftExpression
	equalityExpression -> "ltOp"^ shiftExpression <! shiftExpression
	equalityExpression -> "ltleOp"^ shiftExpression <! shiftExpression <=! shiftExpression
	equalityExpression -> "ltltOp"^ shiftExpression <! shiftExpression <! shiftExpression
	equalityExpression -> "leOp"^ shiftExpression <=! shiftExpression
	equalityExpression -> "leleOp"^ shiftExpression <=! shiftExpression <=! shiftExpression
	equalityExpression -> "leltOp"^ shiftExpression <=! shiftExpression <! shiftExpression
	equalityExpression -> "gtOp"^ shiftExpression >! shiftExpression
	equalityExpression -> "gtgeOp"^ shiftExpression >! shiftExpression >=! shiftExpression
	equalityExpression -> "gtgtOp"^ shiftExpression >! shiftExpression >! shiftExpression
	equalityExpression -> "geOp"^ shiftExpression >=! shiftExpression
	equalityExpression -> "gegeOp"^ shiftExpression >=! shiftExpression >=! shiftExpression
	equalityExpression -> "gegtOp"^ shiftExpression >=! shiftExpression >! shiftExpression
	equalityExpression -> shiftExpression^
	expression -> withBlockExpression^
	expression -> withoutBlockExpression^
	functionItem -> definedFunction^
	functionItem -> trait^
	functionItem -> typeAlias^
	functionKernel -> identifier maybeGenericParameters maybeWhere ( maybeFunParameters ) maybeTypeAnnotation
	funParameter -> identifier typeAnnotation
	genericArgs -> <! genericArgsTypes >!
	genericArgs -> <! genericArgsTypes ,! >!
	genericArgs -> <! genericArgsTypes genericArgsBindings >!
	genericArgsBinding -> identifier =! type
	genericArgsBindings -> ,! list<genericArgsBinding, __T0001>^
	genericArgsTypes -> list<name, __T0001>^
	genericDefault -> identifier = type
	genericDefaults -> genericDefault
	genericDefaults -> genericDefault __V161
	genericName -> identifier
	genericNames -> genericName
	genericNames -> genericName __V160
	genericParameters -> <! genericNames ,! genericDefaults >!
	genericParameters -> <! genericNames >!
	genericParameters -> <! genericDefaults >
	identifier -> IDENTIFIER
	list<genericArgsBinding, __T0001> -> genericArgsBinding^
	list<genericArgsBinding, __T0001> -> genericArgsBinding^ __V17^
	list<name, __T0001> -> name^
	list<name, __T0001> -> name^ __V15^
	literal -> INTEGER_LITERAL^
	literal -> FLOAT_LITERAL
	literal -> BOOL_LITERAL
	maybeFunctionItems -> maybeFunctionItems functionItem
	maybeFunctionItems -> functionItem
	maybeFunctionItems ->
	maybeFunParameters -> maybeFunParameters funParameter
	maybeFunParameters -> funParameter
	maybeFunParameters ->
	maybeGenericParameters ->
	maybeGenericParameters -> genericParameters
	maybeTraitItems ->
	maybeTraitItems -> __V159
	maybeTypeAnnotation -> typeAnnotation
	maybeTypeAnnotation ->
	maybeWhere ->
	maybeWhere -> where
	mulExpression -> "mulOp"^ mulExpression *! unaryExpression
	mulExpression -> "divOp"^ mulExpression /! unaryExpression
	mulExpression -> "remOp"^ mulExpression %! unaryExpression
	mulExpression -> "modOp"^ mulExpression mod! unaryExpression
	mulExpression -> unaryExpression^
	name -> identifier
	name -> identifier genericArgs
	namespace -> namespace! identifier {! namespaceItems }!
	namespaceItem -> namespace^
	namespaceItem -> definedFunction^
	namespaceItem -> trait^
	namespaceItems ->
	namespaceItems -> __V153
	orExpression -> "orElseOp"^ orExpression ||^ andExpression
	orExpression -> andExpression^
	postfixExpression -> "flist"^ postfixExpression (! )!
	postfixExpression -> "flist"^ postfixExpression (! sloppyList<expression, __T0001> )!
	postfixExpression -> "iselect"^ postfixExpression [! expression ]!
	postfixExpression -> "tselect"^ postfixExpression .! tupleIndex
	postfixExpression -> "mselect"^ postfixExpression .! name
	postfixExpression -> primaryExpression^
	primaryExpression -> literal^
	primaryExpression -> (! expression^ )!
	primaryExpression -> name^
	shiftExpression -> "shlOp"^ shiftExpression shl! addExpression
	shiftExpression -> "shrOp"^ shiftExpression shr! addExpression
	shiftExpression -> addExpression^
	sloppyList<expression, __T0001> -> expression^
	sloppyList<expression, __T0001> -> expression^ ,!
	sloppyList<expression, __T0001> -> expression^ __V62^
	sloppyList<expression, __T0001> -> expression^ __V62^ ,!
	trait -> trait! identifier maybeGenericParameters maybeWhere {! maybeTraitItems }!
	traitItem -> definedFunction
	traitItem -> declaredFunction
	traitItem -> definedMethod
	traitItem -> declaredMethod
	traitItem -> traitOutputType
	traitOutputType -> type identifier maybeWhere maybeTypeAnnotation ;
	tupleIndex -> INTEGER_LITERAL
	type -> IDENTIFIER
	typeAlias -> type identifier = type ;
	typeAnnotation -> : type
	unaryExpression -> "negOp"^ -! postfixExpression
	unaryExpression -> "posOp"^ +! postfixExpression
	unaryExpression -> "notOp"^ !! postfixExpression
	unaryExpression -> postfixExpression^
	unit ->
	unit -> __V151
	unitItem -> namespace^
	where -> where
	withBlockExpression -> blockExpression
	withoutBlockExpression -> conditionalExpression^

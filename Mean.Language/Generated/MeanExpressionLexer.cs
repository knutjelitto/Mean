/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Mean.Language.Generated
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	internal class MeanExpressionLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(MeanExpressionLexer), "MeanExpressionLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x0007;
			/// <summary>
			/// The unique identifier for terminal IDENTIFIER
			/// </summary>
			public const int TerminalIdentifier = 0x0014;
			/// <summary>
			/// The unique identifier for terminal INTEGER_LITERAL
			/// </summary>
			public const int TerminalIntegerLiteral = 0x0015;
			/// <summary>
			/// The unique identifier for terminal FLOAT_LITERAL
			/// </summary>
			public const int TerminalFloatLiteral = 0x0016;
			/// <summary>
			/// The unique identifier for terminal BOOL_LITERAL
			/// </summary>
			public const int TerminalBoolLiteral = 0x0017;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0007, "SEPARATOR"),
			new Symbol(0x0014, "IDENTIFIER"),
			new Symbol(0x0015, "INTEGER_LITERAL"),
			new Symbol(0x0016, "FLOAT_LITERAL"),
			new Symbol(0x0017, "BOOL_LITERAL"),
			new Symbol(0x001C, "<"),
			new Symbol(0x001D, ","),
			new Symbol(0x001E, ">"),
			new Symbol(0x001F, "="),
			new Symbol(0x003A, "("),
			new Symbol(0x003B, ")"),
			new Symbol(0x0040, "["),
			new Symbol(0x0041, "]"),
			new Symbol(0x0043, "."),
			new Symbol(0x0046, "-"),
			new Symbol(0x0048, "+"),
			new Symbol(0x004A, "!"),
			new Symbol(0x004C, "*"),
			new Symbol(0x004E, "/"),
			new Symbol(0x0050, "%"),
			new Symbol(0x0052, "mod"),
			new Symbol(0x0056, "shl"),
			new Symbol(0x0058, "shr"),
			new Symbol(0x005A, "=="),
			new Symbol(0x005C, "!="),
			new Symbol(0x005F, "<="),
			new Symbol(0x0066, ">="),
			new Symbol(0x006C, "&"),
			new Symbol(0x006E, "^"),
			new Symbol(0x0070, "|"),
			new Symbol(0x0072, "&&"),
			new Symbol(0x0074, "||"),
			new Symbol(0x0076, "?"),
			new Symbol(0x0077, ":"),
			new Symbol(0x0078, "{"),
			new Symbol(0x0079, "}") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public MeanExpressionLexer(string input) : base(commonAutomaton, terminals, 0x0007, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public MeanExpressionLexer(TextReader input) : base(commonAutomaton, terminals, 0x0007, input) {}
	}
}

/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Mean.Language.Generated
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	public class MeanLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(MeanLexer), "MeanLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal IDENTIFIER
			/// </summary>
			public const int TerminalIdentifier = 0x0003;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x0016;
			/// <summary>
			/// The unique identifier for terminal INTEGER_LITERAL
			/// </summary>
			public const int TerminalIntegerLiteral = 0x0017;
			/// <summary>
			/// The unique identifier for terminal FLOAT_LITERAL
			/// </summary>
			public const int TerminalFloatLiteral = 0x0018;
			/// <summary>
			/// The unique identifier for terminal BOOL_LITERAL
			/// </summary>
			public const int TerminalBoolLiteral = 0x0019;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0003, "IDENTIFIER"),
			new Symbol(0x0016, "SEPARATOR"),
			new Symbol(0x0017, "INTEGER_LITERAL"),
			new Symbol(0x0018, "FLOAT_LITERAL"),
			new Symbol(0x0019, "BOOL_LITERAL"),
			new Symbol(0x001A, "<"),
			new Symbol(0x001B, ","),
			new Symbol(0x001C, ">"),
			new Symbol(0x001D, "="),
			new Symbol(0x001E, "("),
			new Symbol(0x001F, ")"),
			new Symbol(0x0020, "["),
			new Symbol(0x0021, "]"),
			new Symbol(0x0022, "."),
			new Symbol(0x0023, "-"),
			new Symbol(0x0024, "+"),
			new Symbol(0x0025, "!"),
			new Symbol(0x0026, "*"),
			new Symbol(0x0027, "/"),
			new Symbol(0x0028, "%"),
			new Symbol(0x0029, "mod"),
			new Symbol(0x002A, "shl"),
			new Symbol(0x002B, "shr"),
			new Symbol(0x002C, "=="),
			new Symbol(0x002D, "!="),
			new Symbol(0x002E, "<="),
			new Symbol(0x002F, ">="),
			new Symbol(0x0030, "&"),
			new Symbol(0x0031, "^"),
			new Symbol(0x0032, "|"),
			new Symbol(0x0033, "&&"),
			new Symbol(0x0034, "||"),
			new Symbol(0x0035, "?"),
			new Symbol(0x0036, ":"),
			new Symbol(0x0037, "{"),
			new Symbol(0x0038, "}"),
			new Symbol(0x0098, "namespace"),
			new Symbol(0x009A, "function"),
			new Symbol(0x009B, ";"),
			new Symbol(0x009C, "method"),
			new Symbol(0x009D, "type"),
			new Symbol(0x009E, "trait"),
			new Symbol(0x00A2, "where") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public MeanLexer(string input) : base(commonAutomaton, terminals, 0x0016, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public MeanLexer(TextReader input) : base(commonAutomaton, terminals, 0x0016, input) {}
	}
}

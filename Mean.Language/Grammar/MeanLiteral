grammar MeanLiteral : MeanIdentifier
{
    options {}
    
    terminals
    {
        fragment BIN_DIGIT -> [0-9];
        fragment OCT_DIGIT -> [0-9];
        fragment DEC_DIGIT -> [0-9];
        fragment HEX_DIGIT -> [0-9a-fA-F];
        fragment NONZERO_DEC_DIGIT -> [1-9];

        fragment BIN_LITERAL
            -> '0b' (BIN_DIGIT | '_')* BIN_DIGIT (BIN_DIGIT | '_')*
            ;

        fragment OCT_LITERAL
            -> '0o' (OCT_DIGIT | '_')* OCT_DIGIT (OCT_DIGIT | '_')*
            ;

        fragment DEC_LITERAL
            -> '0'
            |  NONZERO_DEC_DIGIT (DEC_DIGIT '_')*
            ;

        fragment HEX_LITERAL
            -> '0o' (HEX_DIGIT | '_')* HEX_DIGIT (HEX_DIGIT | '_')*
            ;

        fragment INTEGER_SUFFIX
            -> 'u8' | 'u16' | 'u32' | 'u64' | 'u128' | 'usize'
             | 'i8' | 'i16' | 'i32' | 'i64' | 'i128' | 'isize'
             ;

        INTEGER_LITERAL
            -> (BIN_LITERAL | OCT_LITERAL | DEC_LITERAL | HEX_LITERAL) INTEGER_SUFFIX?
            ;

        fragment FLOAT_EXPONENT
            -> ('e' | 'E') ('+' | '-')? (DEC_DIGIT | '_')* DEC_DIGIT (DEC_DIGIT | '_')*
            ;

        fragment FLOAT_SUFFIX
            -> 'f32' | 'f64'
            ;

        FLOAT_LITERAL
            ->  DEC_LITERAL FLOAT_EXPONENT
            |   DEC_LITERAL '.' DEC_LITERAL FLOAT_EXPONENT?
            |   DEC_LITERAL  ('.' DEC_LITERAL)? FLOAT_EXPONENT? FLOAT_SUFFIX
            ;

        BOOL_LITERAL
            -> 'true' | 'false'
            ;
    }
  
    rules
    {
        integerLiteral
            ->  INTEGER_LITERAL
            ;

        floatLiteral
            ->  FLOAT_LITERAL
            ;

        numberLiteral
            ->  integerLiteral^
            |   floatLiteral^
            ;

        boolLiteral
            -> BOOL_LITERAL
            ;

        literal
            ->  numberLiteral^
            |   boolLiteral^
            ;
    }
}
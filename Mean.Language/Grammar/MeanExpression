grammar MeanExpression:
    MeanLiteral,
    MeanIdentifier,
    MeanType,
    MeanGenericArgs,
    MeanTools
{
    options {}
    
    terminals {}
  
    rules
    {
        primaryExpression
            ->  literal^
            |   '('! expression^ ')'!
            |   name^
            ;

        postfixExpression
            ->  "flist"^ postfixExpression '(' sloppyList<expression, ','> ')'
            |   "iselect"^ postfixExpression '['! expression ']'!
            |   "tselect"^ postfixExpression '.'! integerLiteral
            |   "mselect"^ postfixExpression '.'! name
            |   primaryExpression^
            ;

        unaryExpression
            ->  "negOp"^ '-'! postfixExpression
            |   "notOp"^ '!'! postfixExpression
            |   postfixExpression^
            ;

        mulExpression
            ->  "mulOp"^ mulExpression '*'! unaryExpression
            |   "divOp"^ mulExpression '/'! unaryExpression
            |   "remOp"^ mulExpression '%'! unaryExpression
            |   "modOp"^ mulExpression 'mod'! unaryExpression
            |   unaryExpression^
            ;

        addExpression
            ->  "addOp"^ addExpression '+'! mulExpression
            |   "subOp"^ addExpression '-'! mulExpression
            |   mulExpression^
            ;

        shiftExpression
            ->  "shlOp"^ shiftExpression 'shl'! addExpression
            |   "shrOp"^ shiftExpression 'shr'! addExpression
            |   addExpression^
            ;

        equalityExpression
            ->  "eqOp"^   shiftExpression '=='! shiftExpression
            |   "neOp"^   shiftExpression '!='! shiftExpression
            |   "ltOp"^   shiftExpression '<'!  shiftExpression
            |   "ltleOp"^ shiftExpression '<'!  shiftExpression '<='! shiftExpression
            |   "ltltOp"^ shiftExpression '<'!  shiftExpression '<'!  shiftExpression
            |   "leOp"^   shiftExpression '<='! shiftExpression
            |   "leleOp"^ shiftExpression '<='! shiftExpression '<='! shiftExpression
            |   "leltOp"^ shiftExpression '<='! shiftExpression '<'!  shiftExpression
            |   "gtOp"^   shiftExpression '>'!  shiftExpression
            |   "gtgeOp"^ shiftExpression '>'!  shiftExpression '>='! shiftExpression
            |   "gtgtOp"^ shiftExpression '>'!  shiftExpression '>'!  shiftExpression
            |   "geOp"^   shiftExpression '>='! shiftExpression
            |   "gegeOp"^ shiftExpression '>='! shiftExpression '>='! shiftExpression
            |   "gegtOp"^ shiftExpression '>='! shiftExpression '>'!  shiftExpression
            |   shiftExpression^
            ;

        bitAndExpression
            ->  "andOp"^ bitAndExpression '&'! equalityExpression
            |   equalityExpression^
            ;

        bitXorExpression
            ->  "xorOp"^ bitXorExpression '^'! bitAndExpression
            |   bitAndExpression^
            ;

        bitOrExpression
            ->  "orOp"^ bitOrExpression '|'! bitXorExpression
            |   bitXorExpression^
            ;

        andExpression
            ->  "andThenOp"^ andExpression '&&'^ bitOrExpression
            |   bitOrExpression^
            ;

        orExpression
            ->  "orElseOp"^ orExpression '||'^ andExpression
            |   andExpression^
            ;

        withoutBlockExpression
            ->  orExpression^
            ;

        withBlockExpression
            ->  '{'! expression^ '}'!
            ;

        expression
            ->  withBlockExpression^
            |   withoutBlockExpression^
            ;
    }
}

grammar MeanGenericArgs: 
    MeanIdentifier,
    MeanType,
    MeanTools
{
    options {}
    
    terminals {}
  
    rules
    {
        name
            ->  identifier genericArgs?
            ;

        genericArgs
            ->  '<'! genericArgsTypes (','?)! '>'!
            |   '<'! genericArgsTypes genericArgsBindings? '>'!
            ;

        genericArgsTypes
            ->  list<name,','>^
            ;

        genericArgsBindings
            -> ','! list<genericArgsBinding,','>^
            ;

        genericArgsBinding
            -> identifier '='! type
            ;
    }
}